exec("import re;import base64");exec(base64.b64decode("ICMjIyMjIyMjIyMjIyNJbXBvcnRzIyMjIyMjIyMjIyMjIw0KaW1wb3J0IHhibWMseGJtY2FkZG9uLHhibWNndWkseGJtY3BsdWdpbixiYXNlNjQsb3MscmUsdW5pY29kZWRhdGEscmVxdWVzdHMsdGltZSxzdHJpbmcsc3lzLHVybGxpYix1cmxsaWIyLGpzb24sdXJscGFyc2UsZGF0ZXRpbWUsemlwZmlsZSxzaHV0aWwNCmZyb20gcmVzb3VyY2VzLm1vZHVsZXMgaW1wb3J0IGNsaWVudCxjb250cm9sLHRvb2xzLHNob3J0bGlua3MNCmZyb20gcmVzb3VyY2VzLml2dWUgaW1wb3J0IGl2dWVzZXR1cA0KZnJvbSBkYXRldGltZSBpbXBvcnQgZGF0ZQ0KaW1wb3J0IHhtbC5ldHJlZS5FbGVtZW50VHJlZSBhcyBFbGVtZW50VHJlZQ0KIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjDQoNCiMjIyMjIyMjIyMjIyNEZWZpbmVkIFN0cmluZ3MjIyMjIyMjIyMjIyMjDQphZGRvbl9pZCAgICAgPSAnc2NyaXB0LlRWc3VwZXJ0dWdhLnByZW1pdW0nDQpzZWxmQWRkb24gICAgPSB4Ym1jYWRkb24uQWRkb24oaWQ9YWRkb25faWQpDQppY29uICAgICAgICAgPSB4Ym1jLnRyYW5zbGF0ZVBhdGgob3MucGF0aC5qb2luKCdzcGVjaWFsOi8vaG9tZS9hZGRvbnMvJyArIGFkZG9uX2lkLCAnaWNvbi5wbmcnKSkNCmZhbmFydCAgICAgICA9IHhibWMudHJhbnNsYXRlUGF0aChvcy5wYXRoLmpvaW4oJ3NwZWNpYWw6Ly9ob21lL2FkZG9ucy8nICsgYWRkb25faWQgLCAnZmFuYXJ0LmpwZycpKQ0KcGVzcXVpc2EgICAgICA9IHhibWMudHJhbnNsYXRlUGF0aChvcy5wYXRoLmpvaW4oJ3NwZWNpYWw6Ly9ob21lL2FkZG9ucy8nICsgYWRkb25faWQsICdpY29ucy9wZXNxdWlzYS5wbmcnKSkNClNldHRpbmdzICAgICAgID0geGJtYy50cmFuc2xhdGVQYXRoKG9zLnBhdGguam9pbignc3BlY2lhbDovL2hvbWUvYWRkb25zLycgKyBhZGRvbl9pZCwgJ2ljb25zL1NldHRpbmdzLnBuZycpKQ0KVXRpbGl6YWRvciAgICAgICA9IHhibWMudHJhbnNsYXRlUGF0aChvcy5wYXRoLmpvaW4oJ3NwZWNpYWw6Ly9ob21lL2FkZG9ucy8nICsgYWRkb25faWQsICdpY29ucy9VdGlsaXphZG9yLnBuZycpKQ0KZ3VpZGUgICAgICAgICA9IHhibWMudHJhbnNsYXRlUGF0aChvcy5wYXRoLmpvaW4oJ3NwZWNpYWw6Ly9ob21lL2FkZG9ucy8nICsgYWRkb25faWQsICdpY29ucy9ndWlkZS5wbmcnKSkNCkV4dHJhcyAgICAgICAgID0geGJtYy50cmFuc2xhdGVQYXRoKG9zLnBhdGguam9pbignc3BlY2lhbDovL2hvbWUvYWRkb25zLycgKyBhZGRvbl9pZCwgJ2ljb25zL0V4dHJhcy5wbmcnKSkNCkxpdmVUViAgICAgICAgID0geGJtYy50cmFuc2xhdGVQYXRoKG9zLnBhdGguam9pbignc3BlY2lhbDovL2hvbWUvYWRkb25zLycgKyBhZGRvbl9pZCwgJ2ljb25zL0xpdmVUVi5wbmcnKSkNCkNhdGNodXAgICAgICAgICA9IHhibWMudHJhbnNsYXRlUGF0aChvcy5wYXRoLmpvaW4oJ3NwZWNpYWw6Ly9ob21lL2FkZG9ucy8nICsgYWRkb25faWQsICdpY29ucy9DYXRjaHVwLnBuZycpKQ0KZnVuZG9fdHYgICAgICAgICA9IHhibWMudHJhbnNsYXRlUGF0aChvcy5wYXRoLmpvaW4oJ3NwZWNpYWw6Ly9ob21lL2FkZG9ucy8nICsgYWRkb25faWQsICdpY29ucy9mdW5kb190di5wbmcnKSkNCmZ1bmRvX2RlZiAgICAgICAgID0geGJtYy50cmFuc2xhdGVQYXRoKG9zLnBhdGguam9pbignc3BlY2lhbDovL2hvbWUvYWRkb25zLycgKyBhZGRvbl9pZCwgJ2ljb25zL2Z1bmRvX2RlZi5wbmcnKSkNCmZ1bmRvX2NvbiAgICAgICAgID0geGJtYy50cmFuc2xhdGVQYXRoKG9zLnBhdGguam9pbignc3BlY2lhbDovL2hvbWUvYWRkb25zLycgKyBhZGRvbl9pZCwgJ2ljb25zL2Z1bmRvX2Nvbi5wbmcnKSkNCmZ1bmRvX3R2X2FyYyAgICAgICAgID0geGJtYy50cmFuc2xhdGVQYXRoKG9zLnBhdGguam9pbignc3BlY2lhbDovL2hvbWUvYWRkb25zLycgKyBhZGRvbl9pZCwgJ2ljb25zL2Z1bmRvX3R2X2FyYy5wbmcnKSkNCmZ1bmRvX3ZpZCAgICAgICAgID0geGJtYy50cmFuc2xhdGVQYXRoKG9zLnBhdGguam9pbignc3BlY2lhbDovL2hvbWUvYWRkb25zLycgKyBhZGRvbl9pZCwgJ2ljb25zL2Z1bmRvX3ZpZC5wbmcnKSkNCnR2Y2F0Y2h1cCAgICAgICAgID0geGJtYy50cmFuc2xhdGVQYXRoKG9zLnBhdGguam9pbignc3BlY2lhbDovL2hvbWUvYWRkb25zLycgKyBhZGRvbl9pZCwgJ2ljb25zL3R2Y2F0Y2h1cC5wbmcnKSkNCkd1aWRlZnVuZG8gICAgICAgICA9IHhibWMudHJhbnNsYXRlUGF0aChvcy5wYXRoLmpvaW4oJ3NwZWNpYWw6Ly9ob21lL2FkZG9ucy8nICsgYWRkb25faWQsICdpY29ucy9HdWlkZWZ1bmRvLmpwZycpKQ0KZXh0cmFzZnVuZG8gICAgICAgICA9IHhibWMudHJhbnNsYXRlUGF0aChvcy5wYXRoLmpvaW4oJ3NwZWNpYWw6Ly9ob21lL2FkZG9ucy8nICsgYWRkb25faWQsICdpY29ucy9leHRyYXNmdW5kby5qcGcnKSkNCmZpbG1lcyAgICAgICAgID0geGJtYy50cmFuc2xhdGVQYXRoKG9zLnBhdGguam9pbignc3BlY2lhbDovL2hvbWUvYWRkb25zLycgKyBhZGRvbl9pZCwgJ2ljb25zL2ZpbG1lcy5wbmcnKSkNCg0KDQoNCg0KDQp1c2VybmFtZSAgICAgPSBjb250cm9sLnNldHRpbmcoJ1VzZXJuYW1lJykNCnBhc3N3b3JkICAgICA9IGNvbnRyb2wuc2V0dGluZygnUGFzc3dvcmQnKQ0KDQpob3N0ICAgICAgICAgPSAnaHR0cDovL3RlYW10dWdhaXB0di5tZScNCnBvcnQgICAgICAgICA9ICcyNTQ2MScNCg0KbGl2ZV91cmwgICAgID0gJyVzOiVzL2VuaWdtYTIucGhwP3VzZXJuYW1lPSVzJnBhc3N3b3JkPSVzJnR5cGU9Z2V0X2xpdmVfY2F0ZWdvcmllcyclKGhvc3QscG9ydCx1c2VybmFtZSxwYXNzd29yZCkNCnZvZF91cmwgICAgICA9ICclczolcy9lbmlnbWEyLnBocD91c2VybmFtZT0lcyZwYXNzd29yZD0lcyZ0eXBlPWdldF92b2RfY2F0ZWdvcmllcyclKGhvc3QscG9ydCx1c2VybmFtZSxwYXNzd29yZCkNCnBhbmVsX2FwaSAgICA9ICclczolcy9wYW5lbF9hcGkucGhwP3VzZXJuYW1lPSVzJnBhc3N3b3JkPSVzJyUoaG9zdCxwb3J0LHVzZXJuYW1lLHBhc3N3b3JkKQ0KcGxheV91cmwgICAgID0gJyVzOiVzL2xpdmUvJXMvJXMvJyUoaG9zdCxwb3J0LHVzZXJuYW1lLHBhc3N3b3JkKQ0KDQoNCkd1aWRlID0geGJtYy50cmFuc2xhdGVQYXRoKG9zLnBhdGguam9pbignc3BlY2lhbDovL2hvbWUvYWRkb25zL3NjcmlwdC5UVnN1cGVydHVnYS5wcmVtaXVtL3Jlc291cmNlcy9jYXRjaHVwJywgJ2d1aWRlLnhtbCcpKQ0KR3VpZGVMb2MgPSB4Ym1jLnRyYW5zbGF0ZVBhdGgob3MucGF0aC5qb2luKCdzcGVjaWFsOi8vaG9tZS9hZGRvbnMvc2NyaXB0LlRWc3VwZXJ0dWdhLnByZW1pdW0vcmVzb3VyY2VzL2NhdGNodXAnLCAnZycpKQ0KDQphZHZhbmNlZF9zZXR0aW5ncyAgICAgICAgICAgPSAgeGJtYy50cmFuc2xhdGVQYXRoKCdzcGVjaWFsOi8vaG9tZS9hZGRvbnMvJythZGRvbl9pZCsnL3Jlc291cmNlcy9hZHZhbmNlZF9zZXR0aW5ncycpDQphZHZhbmNlZF9zZXR0aW5nc190YXJnZXQgICAgPSAgeGJtYy50cmFuc2xhdGVQYXRoKG9zLnBhdGguam9pbignc3BlY2lhbDovL2hvbWUvdXNlcmRhdGEnLCdhZHZhbmNlZHNldHRpbmdzLnhtbCcpKQ0KIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMNCg0KDQpkZWYgc3RhcnQoKToNCglpZiB1c2VybmFtZT09IiI6DQoJCXVzZXIgPSB1c2VycG9wdXAoKQ0KCQlwYXNzdz0gcGFzc3BvcHVwKCkNCgkJY29udHJvbC5zZXRTZXR0aW5nKCdVc2VybmFtZScsdXNlcikNCgkJY29udHJvbC5zZXRTZXR0aW5nKCdQYXNzd29yZCcscGFzc3cpDQoJCXhibWMuZXhlY3V0ZWJ1aWx0aW4oJ0NvbnRhaW5lci5SZWZyZXNoJykNCgkJYXV0aCA9ICclczolcy9lbmlnbWEyLnBocD91c2VybmFtZT0lcyZwYXNzd29yZD0lcyZ0eXBlPWdldF92b2RfY2F0ZWdvcmllcyclKGhvc3QscG9ydCx1c2VyLHBhc3N3KQ0KCQlhdXRoID0gdG9vbHMuT1BFTl9VUkwoYXV0aCkNCgkJaWYgYXV0aCA9PSAiIjoNCgkJCWxpbmUxID0gIlV0aWxpemFkb3Igb3Ugc2VuaGEgSW5jb3JyZWN0b3MuIg0KCQkJbGluZTIgPSAiQWx0ZXJlIGUgdGVudGUgbm92YW1lbnRlLiIgDQoJCQlsaW5lMyA9ICIiIA0KCQkJeGJtY2d1aS5EaWFsb2coKS5vaygnQXRlbmNhbycsIGxpbmUxLCBsaW5lMiwgbGluZTMpDQoJCQlzdGFydCgpDQoJCWVsc2U6DQoJCQlsaW5lMSA9ICJMb2dpbiBiZW0tc3VjZWRpZG8iDQoJCQlsaW5lMiA9ICJCZW0tdmluZG8gYW8gVFZzdXBlcnR1Z2EgUHJlbWl1bSINCgkJCWxpbmUzID0gKCdbQ09MT1IgY29ybnNpbGtdJXNbL0NPTE9SXScldXNlcikNCgkJCXhibWNndWkuRGlhbG9nKCkub2soJ1RWc3VwZXJ0dWdhIFByZW1pdW0nLCBsaW5lMSwgbGluZTIsIGxpbmUzKQ0KCQkJdHZndWlkZXNldHVwKCkNCgkJCWFkZG9uc2V0dGluZ3MoJ0FEUzInLCcnKQ0KCQkJeGJtYy5leGVjdXRlYnVpbHRpbignQ29udGFpbmVyLlJlZnJlc2gnKQ0KCQkJaG9tZSgpDQoJZWxzZToNCgkJYXV0aCA9ICclczolcy9lbmlnbWEyLnBocD91c2VybmFtZT0lcyZwYXNzd29yZD0lcyZ0eXBlPWdldF92b2RfY2F0ZWdvcmllcyclKGhvc3QscG9ydCx1c2VybmFtZSxwYXNzd29yZCkNCgkJYXV0aCA9IHRvb2xzLk9QRU5fVVJMKGF1dGgpDQoJCWlmIG5vdCBhdXRoPT0iIjoNCgkJCXRvb2xzLmFkZERpcignTWluaGEgQ29udGEnLCd1cmwnLDYsVXRpbGl6YWRvcixmdW5kb190dl9hcmMsJycpDQoJCQl0b29scy5hZGREaXIoJ1ZlciBUVicsJ2xpdmUnLDEsTGl2ZVRWLGZ1bmRvX3R2LCcnKQ0KCQkJdG9vbHMuYWRkRGlyKCcyNGggUmVwZXRpY29lcycsJ3VybCcsMTIsQ2F0Y2h1cCx0dmNhdGNodXAsJycpDQoJCQlpZiB4Ym1jLmdldENvbmRWaXNpYmlsaXR5KCdTeXN0ZW0uSGFzQWRkb24ocHZyLmlwdHZzaW1wbGUpJykgb3IgeGJtYy5nZXRDb25kVmlzaWJpbGl0eSgnU3lzdGVtLkhhc0FkZG9uKHNjcmlwdC5pdnVlZ3VpZGUpJyk6DQoJCQkJdG9vbHMuYWRkRGlyKCdHdWlhIGRlIFRWJywncHZyJyw3LGd1aWRlLEd1aWRlZnVuZG8sJycpDQoJCQkJDQoJCQkJDQoJCQl0b29scy5hZGREaXIoJ1ZPRCcsJ3ZvZCcsMyxmaWxtZXMsZnVuZG9fdmlkLCcnKQ0KCQkJdG9vbHMuYWRkRGlyKCdQZXNxdWlzYScsJ3VybCcsNSxwZXNxdWlzYSxmdW5kb19jb24sJycpDQoJCQl0b29scy5hZGREaXIoJ0NvbmZpZ3VyYWNvZXMnLCd1cmwnLDgsU2V0dGluZ3MsZnVuZG9fZGVmLCcnKQ0KCQkJdG9vbHMuYWRkRGlyKCdFeHRyYXMnLCd1cmwnLDE2LEV4dHJhcyxleHRyYXNmdW5kbywnJykNCmRlZiBob21lKCk6DQoJdG9vbHMuYWRkRGlyKCdNaW5oYSBDb250YScsJ3VybCcsNixVdGlsaXphZG9yLGZ1bmRvX3R2X2FyYywnJykNCgl0b29scy5hZGREaXIoJ1RWIGFvIFZpdm8nLCdsaXZlJywxLExpdmVUVixmdW5kb190diwnJykNCgl0b29scy5hZGREaXIoJzI0aCBSZXBldGljb2VzJywndXJsJywxMixDYXRjaHVwLHR2Y2F0Y2h1cCwnJykNCglpZiB4Ym1jLmdldENvbmRWaXNpYmlsaXR5KCdTeXN0ZW0uSGFzQWRkb24ocHZyLmlwdHZzaW1wbGUpJyk6DQoJCXRvb2xzLmFkZERpcignR3VpYSBkZSBUVicsJ3B2cicsNyxndWlkZSxHdWlkZWZ1bmRvLCcnKQ0KCWlmIHhibWMuZ2V0Q29uZFZpc2liaWxpdHkoJ1N5c3RlbS5IYXNBZGRvbihzY3JpcHQubW9kdWxlLnZvZC50dnN1cGVydHVnYS5hZGRvbiknKToNCgkJdG9vbHMuYWRkRGlyKCdUViBHdWlkZScsJ3B2cicsMjAsZ3VpZGUsR3VpZGVmdW5kbywnJykJCQ0KCQkNCgl0b29scy5hZGREaXIoJ1ZPRCcsJ3ZvZCcsMyxpY29fdmlkLGZ1bmRvX3ZpZCwnJykNCgl0b29scy5hZGREaXIoJ1Blc3F1aXNhJywnJyw1LHBlc3F1aXNhLGZ1bmRvX2NvbiwnJykNCgl0b29scy5hZGREaXIoJ0NvbmZpZ3VyYWNvZXMnLCd1cmwnLDgsU2V0dGluZ3MsZnVuZG9fZGVmLCcnKQ0KCXRvb2xzLmFkZERpcignRXh0cmFzJywndXJsJywxNixFeHRyYXMsZXh0cmFzZnVuZG8sJycpDQoJCQ0KZGVmIGxpdmVjYXRlZ29yeSh1cmwpOg0KCQ0KCW9wZW4gPSB0b29scy5PUEVOX1VSTChsaXZlX3VybCkNCglhbGxfY2F0cyA9IHRvb2xzLnJlZ2V4X2dldF9hbGwob3BlbiwnPGNoYW5uZWw+JywnPC9jaGFubmVsPicpDQoJZm9yIGEgaW4gYWxsX2NhdHM6DQoJCW5hbWUgPSB0b29scy5yZWdleF9mcm9tX3RvKGEsJzx0aXRsZT4nLCc8L3RpdGxlPicpDQoJCW5hbWUgPSBiYXNlNjQuYjY0ZGVjb2RlKG5hbWUpDQoJCXVybDEgID0gdG9vbHMucmVnZXhfZnJvbV90byhhLCc8cGxheWxpc3RfdXJsPicsJzwvcGxheWxpc3RfdXJsPicpLnJlcGxhY2UoJzwhW0NEQVRBWycsJycpLnJlcGxhY2UoJ11dPicsJycpDQoJCXRvb2xzLmFkZERpcihuYW1lLHVybDEsMixpY29uLGZhbmFydCwnJykNCgkJDQpkZWYgTGl2ZWxpc3QodXJsKToNCglvcGVuID0gdG9vbHMuT1BFTl9VUkwodXJsKQ0KCWFsbF9jYXRzID0gdG9vbHMucmVnZXhfZ2V0X2FsbChvcGVuLCc8Y2hhbm5lbD4nLCc8L2NoYW5uZWw+JykNCglmb3IgYSBpbiBhbGxfY2F0czoNCgkJbmFtZSA9IHRvb2xzLnJlZ2V4X2Zyb21fdG8oYSwnPHRpdGxlPicsJzwvdGl0bGU+JykNCgkJbmFtZSA9IGJhc2U2NC5iNjRkZWNvZGUobmFtZSkNCgkJeGJtYy5sb2coc3RyKG5hbWUpKQ0KCQl0cnk6DQoJCQluYW1lID0gcmUuc3ViKCdcWy4qP21pbiAnLCctJyxuYW1lKQ0KCQlleGNlcHQ6DQoJCQlwYXNzDQoJCXRodW1iPSB0b29scy5yZWdleF9mcm9tX3RvKGEsJzxkZXNjX2ltYWdlPicsJzwvZGVzY19pbWFnZT4nKS5yZXBsYWNlKCc8IVtDREFUQVsnLCcnKS5yZXBsYWNlKCddXT4nLCcnKQ0KCQl1cmwxICA9IHRvb2xzLnJlZ2V4X2Zyb21fdG8oYSwnPHN0cmVhbV91cmw+JywnPC9zdHJlYW1fdXJsPicpLnJlcGxhY2UoJzwhW0NEQVRBWycsJycpLnJlcGxhY2UoJ11dPicsJycpDQoJCWRlc2MgPSB0b29scy5yZWdleF9mcm9tX3RvKGEsJzxkZXNjcmlwdGlvbj4nLCc8L2Rlc2NyaXB0aW9uPicpDQoJCXRvb2xzLmFkZERpcihuYW1lLHVybDEsNCx0aHVtYixmYW5hcnQsYmFzZTY0LmI2NGRlY29kZShkZXNjKSkNCgkJDQoJDQpkZWYgdm9kKHVybCk6DQoJaWYgdXJsID09InZvZCI6DQoJCW9wZW4gPSB0b29scy5PUEVOX1VSTCh2b2RfdXJsKQ0KCWVsc2U6DQoJCW9wZW4gPSB0b29scy5PUEVOX1VSTCh1cmwpDQoJYWxsX2NhdHMgPSB0b29scy5yZWdleF9nZXRfYWxsKG9wZW4sJzxjaGFubmVsPicsJzwvY2hhbm5lbD4nKQ0KCWZvciBhIGluIGFsbF9jYXRzOg0KCQlpZiAnPHBsYXlsaXN0X3VybD4nIGluIG9wZW46DQoJCQluYW1lID0gdG9vbHMucmVnZXhfZnJvbV90byhhLCc8dGl0bGU+JywnPC90aXRsZT4nKQ0KCQkJdXJsMSAgPSB0b29scy5yZWdleF9mcm9tX3RvKGEsJzxwbGF5bGlzdF91cmw+JywnPC9wbGF5bGlzdF91cmw+JykucmVwbGFjZSgnPCFbQ0RBVEFbJywnJykucmVwbGFjZSgnXV0+JywnJykNCgkJCXRvb2xzLmFkZERpcihzdHIoYmFzZTY0LmI2NGRlY29kZShuYW1lKSkucmVwbGFjZSgnPycsJycpLHVybDEsMyxpY29uLGZhbmFydCwnJykNCgkJZWxzZToNCgkJCWlmIHhibWNhZGRvbi5BZGRvbigpLmdldFNldHRpbmcoJ21ldGEnKSA9PSAndHJ1ZSc6DQoJCQkJdHJ5Og0KCQkJCQluYW1lID0gdG9vbHMucmVnZXhfZnJvbV90byhhLCc8dGl0bGU+JywnPC90aXRsZT4nKQ0KCQkJCQluYW1lID0gYmFzZTY0LmI2NGRlY29kZShuYW1lKQ0KCQkJCQl0aHVtYj0gdG9vbHMucmVnZXhfZnJvbV90byhhLCc8ZGVzY19pbWFnZT4nLCc8L2Rlc2NfaW1hZ2U+JykucmVwbGFjZSgnPCFbQ0RBVEFbJywnJykucmVwbGFjZSgnXV0+JywnJykNCgkJCQkJdXJsICA9IHRvb2xzLnJlZ2V4X2Zyb21fdG8oYSwnPHN0cmVhbV91cmw+JywnPC9zdHJlYW1fdXJsPicpLnJlcGxhY2UoJzwhW0NEQVRBWycsJycpLnJlcGxhY2UoJ11dPicsJycpDQoJCQkJCWRlc2MgPSB0b29scy5yZWdleF9mcm9tX3RvKGEsJzxkZXNjcmlwdGlvbj4nLCc8L2Rlc2NyaXB0aW9uPicpDQoJCQkJCWRlc2MgPSBiYXNlNjQuYjY0ZGVjb2RlKGRlc2MpDQoJCQkJCXBsb3QgPSB0b29scy5yZWdleF9mcm9tX3RvKGRlc2MsJ1BMT1Q6JywnXG4nKQ0KCQkJCQljYXN0ID0gdG9vbHMucmVnZXhfZnJvbV90byhkZXNjLCdDQVNUOicsJ1xuJykNCgkJCQkJcmF0aW49IHRvb2xzLnJlZ2V4X2Zyb21fdG8oZGVzYywnUkFUSU5HOicsJ1xuJykNCgkJCQkJeWVhciA9IHRvb2xzLnJlZ2V4X2Zyb21fdG8oZGVzYywnUkVMRUFTRURBVEU6JywnXG4nKS5yZXBsYWNlKCcgJywnLScpDQoJCQkJCXllYXIgPSByZS5jb21waWxlKCctLio/LS4qPy0oLio/KS0nLHJlLkRPVEFMTCkuZmluZGFsbCh5ZWFyKQ0KCQkJCQlydW50ID0gdG9vbHMucmVnZXhfZnJvbV90byhkZXNjLCdEVVJBVElPTl9TRUNTOicsJ1xuJykNCgkJCQkJZ2VucmU9IHRvb2xzLnJlZ2V4X2Zyb21fdG8oZGVzYywnR0VOUkU6JywnXG4nKQ0KCQkJCQl0b29scy5hZGREaXJNZXRhKHN0cihuYW1lKS5yZXBsYWNlKCdbL0NPTE9SXS4nLCcuWy9DT0xPUl0nKSx1cmwsNCx0aHVtYixmYW5hcnQscGxvdCxzdHIoeWVhcikucmVwbGFjZSgiWyciLCIiKS5yZXBsYWNlKCInXSIsIiIpLHN0cihjYXN0KS5zcGxpdCgpLHJhdGluLHJ1bnQsZ2VucmUpDQoJCQkJZXhjZXB0OnBhc3MNCgkJCQl4Ym1jcGx1Z2luLnNldENvbnRlbnQoaW50KHN5cy5hcmd2WzFdKSwgJ21vdmllcycpDQoJCQllbHNlOg0KCQkJCW5hbWUgPSB0b29scy5yZWdleF9mcm9tX3RvKGEsJzx0aXRsZT4nLCc8L3RpdGxlPicpDQoJCQkJbmFtZSA9IGJhc2U2NC5iNjRkZWNvZGUobmFtZSkNCgkJCQl0aHVtYj0gdG9vbHMucmVnZXhfZnJvbV90byhhLCc8ZGVzY19pbWFnZT4nLCc8L2Rlc2NfaW1hZ2U+JykucmVwbGFjZSgnPCFbQ0RBVEFbJywnJykucmVwbGFjZSgnXV0+JywnJykNCgkJCQl1cmwgID0gdG9vbHMucmVnZXhfZnJvbV90byhhLCc8c3RyZWFtX3VybD4nLCc8L3N0cmVhbV91cmw+JykucmVwbGFjZSgnPCFbQ0RBVEFbJywnJykucmVwbGFjZSgnXV0+JywnJykNCgkJCQlkZXNjID0gdG9vbHMucmVnZXhfZnJvbV90byhhLCc8ZGVzY3JpcHRpb24+JywnPC9kZXNjcmlwdGlvbj4nKQ0KCQkJCXRvb2xzLmFkZERpcihuYW1lLHVybCw0LHRodW1iLGZhbmFydCxiYXNlNjQuYjY0ZGVjb2RlKGRlc2MpKQ0KCQkNCgkJDQojIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMNCmRlZiBjYXRjaHVwKCk6DQogICAgbG9naW51cmwgICA9ICJodHRwOi8vdGVhbXR1Z2FpcHR2Lm1lOjI1NDYxL2dldC5waHA/dXNlcm5hbWU9IiArIHVzZXJuYW1lICsgIiZwYXNzd29yZD0iICsgcGFzc3dvcmQgKyAiJnR5cGU9bTN1X3BsdXMmb3V0cHV0PXRzIg0KICAgIHRyeToNCiAgICAgICAgY29ubmVjdGlvbiA9IHVybGxpYjIudXJsb3Blbihsb2dpbnVybCkNCiAgICAgICAgcHJpbnQgY29ubmVjdGlvbi5nZXRjb2RlKCkNCiAgICAgICAgY29ubmVjdGlvbi5jbG9zZSgpDQogICAgICAgICNwbGF5bGlzdCBmb3VuZCwgdXNlciBhY3RpdmUgJiBsb2dpbiBjb3JyZWN0LCBwcm9jZWVkIHRvIGFkZG9uDQogICAgICAgIHBhc3MNCiAgICAgICAgDQogICAgZXhjZXB0IHVybGxpYjIuSFRUUEVycm9yLCBlOg0KICAgICAgICBwcmludCBlLmdldGNvZGUoKQ0KICAgICAgICBkaWFsb2cub2soIltDT0xPUiB3aGl0ZV1FeHBpcmVkIEFjY291bnRbL0NPTE9SXSIsJ1tDT0xPUiB3aGl0ZV1Zb3UgY2Fubm90IHVzZSB0aGlzIHNlcnZpY2Ugd2l0aCBhbiBleHBpcmVkIGFjY291bnRbL0NPTE9SXScsJyAnLCdbQ09MT1Igd2hpdGVdUGxlYXNlIGNoZWNrIHlvdXIgYWNjb3VudCBpbmZvcm1hdGlvblsvQ09MT1JdJykNCiAgICAgICAgc3lzLmV4aXQoMSkNCiAgICAgICAgeGJtYy5leGVjdXRlYnVpbHRpbigiRGlhbG9nLkNsb3NlKGJ1c3lkaWFsb2cpIikNCg0KICAgIHVybCA9ICIlczolcy94bWx0di5waHA/dXNlcm5hbWU9JXMmcGFzc3dvcmQ9JXMiJShob3N0LHBvcnQsdXNlcm5hbWUscGFzc3dvcmQpDQogICAgRG93bmxvYWRlckNsYXNzKHVybCxHdWlkZUxvYyArICJ1aWRlLnhtbCIpDQogICAgDQogICAgZiA9IG9wZW4oR3VpZGUsICdyKycpDQogICAgaW5wdXQgPSBvcGVuKEd1aWRlKS5yZWFkKCkuZGVjb2RlKCdVVEYtOCcpDQogICAgb3V0cHV0ID0gdW5pY29kZWRhdGEubm9ybWFsaXplKCdORktEJywgaW5wdXQpLmVuY29kZSgnQVNDSUknLCAnaWdub3JlJykNCiAgICBmLndyaXRlKG91dHB1dCkNCiAgICBmLnRydW5jYXRlKCkNCiAgICBmLmNsb3NlKCkNCiAgICBsaXN0Y2F0Y2h1cCgpDQoJCQ0KZGVmIGxpc3RjYXRjaHVwKCk6DQoJb3BlbiA9IHRvb2xzLk9QRU5fVVJMKHBhbmVsX2FwaSkNCglhbGwgID0gdG9vbHMucmVnZXhfZ2V0X2FsbChvcGVuLCd7Im51bScsJ2RpcmVjdCcpDQoJZm9yIGEgaW4gYWxsOg0KCQlpZiAnInR2X2FyY2hpdmUiOjEnIGluIGE6DQoJCQluYW1lID0gdG9vbHMucmVnZXhfZnJvbV90byhhLCciZXBnX2NoYW5uZWxfaWQiOiInLCciJykNCgkJCXRodW1iPSB0b29scy5yZWdleF9mcm9tX3RvKGEsJyJzdHJlYW1faWNvbiI6IicsJyInKS5yZXBsYWNlKCdcLycsJy8nKQ0KCQkJaWQgICA9IHRvb2xzLnJlZ2V4X2Zyb21fdG8oYSwnc3RyZWFtX2lkIjoiJywnIicpDQoJCQl0b29scy5hZGREaXIobmFtZS5yZXBsYWNlKCdFTlQ6JywnW0NPTE9SIGJsdWVdRU5UOlsvQ09MT1JdJykucmVwbGFjZSgnRE9DOicsJ1tDT0xPUiBibHVlXURPQzpbL0NPTE9SXScpLnJlcGxhY2UoJ01PVjonLCdbQ09MT1IgYmx1ZV1NT1Y6Wy9DT0xPUl0nKS5yZXBsYWNlKCdTU1M6JywnW0NPTE9SIGJsdWVdU1NTWy9DT0xPUl0nKS5yZXBsYWNlKCdCVFM6JywnW0NPTE9SIGJsdWVdQlRTOlsvQ09MT1JdJykucmVwbGFjZSgnVEVTVCcsJ1tDT0xPUiBibHVlXVRFU1RbL0NPTE9SXScpLnJlcGxhY2UoJ0luc3RhbGwnLCdbQ09MT1IgYmx1ZV1JbnN0YWxsWy9DT0xPUl0nKS5yZXBsYWNlKCcyNC83JywnW0NPTE9SIGJsdWVdMjQvN1svQ09MT1JdJykucmVwbGFjZSgnSU5UOicsJ1tDT0xPUiBibHVlXUlOVDpbL0NPTE9SXScpLnJlcGxhY2UoJ0RFOicsJ1tDT0xPUiBibHVlXURFOlsvQ09MT1JdJykucmVwbGFjZSgnRlI6JywnW0NPTE9SIGJsdWVdRlI6Wy9DT0xPUl0nKS5yZXBsYWNlKCdQTDonLCdbQ09MT1IgYmx1ZV1QTDpbL0NPTE9SXScpLnJlcGxhY2UoJ0FSOicsJ1tDT0xPUiBibHVlXUFSOlsvQ09MT1JdJykucmVwbGFjZSgnTElWRTonLCdbQ09MT1IgYmx1ZV1MSVZFOlsvQ09MT1JdJykucmVwbGFjZSgnRVM6JywnW0NPTE9SIGJsdWVdRVM6Wy9DT0xPUl0nKS5yZXBsYWNlKCdJTjonLCdbQ09MT1IgYmx1ZV1JTjpbL0NPTE9SXScpLnJlcGxhY2UoJ1BLOicsJ1tDT0xPUiBibHVlXVBLOlsvQ09MT1JdJyksJ3VybCcsMTMsdGh1bWIsZmFuYXJ0LGlkKQ0KCQkJDQoNCmRlZiB0dmFyY2hpdmUobmFtZSxkZXNjcmlwdGlvbik6DQogICAgbmFtZSA9IHN0cihuYW1lLnJlcGxhY2UoJ1tDT0xPUiBibHVlXUVOVDpbL0NPTE9SXScsJ0VOVDonKS5yZXBsYWNlKCdbQ09MT1IgYmx1ZV1ET0M6Wy9DT0xPUl0nLCdET0M6JykucmVwbGFjZSgnW0NPTE9SIGJsdWVdTU9WOlsvQ09MT1JdJywnTU9WJykucmVwbGFjZSgnW0NPTE9SIGJsdWVdU1NTU1svQ09MT1JdJywnU1NTOicpLnJlcGxhY2UoJ1tDT0xPUiBibHVlXUJUUzpbL0NPTE9SXScsJ0JUUzonKS5yZXBsYWNlKCdbQ09MT1IgYmx1ZV1JTlQ6Wy9DT0xPUl0nLCdJTlQ6JykucmVwbGFjZSgnW0NPTE9SIGJsdWVdREU6Wy9DT0xPUl0nLCdERTonKS5yZXBsYWNlKCdbQ09MT1IgYmx1ZV1GUjpbL0NPTE9SXScsJ0ZSOicpLnJlcGxhY2UoJ1tDT0xPUiBibHVlXVBMOlsvQ09MT1JdJywnUEw6JykucmVwbGFjZSgnW0NPTE9SIGJsdWVdQVI6Wy9DT0xPUl0nLCdBUjonKS5yZXBsYWNlKCdbQ09MT1IgYmx1ZV1MSVZFOlsvQ09MT1JdJywnTElWRTonKS5yZXBsYWNlKCdbQ09MT1IgYmx1ZV1FUzpbL0NPTE9SXScsJ0VTOicpLnJlcGxhY2UoJ1tDT0xPUiBibHVlXUlOOlsvQ09MT1JdJywnSU46JykucmVwbGFjZSgnW0NPTE9SIGJsdWVdUEs6Wy9DT0xPUl0nLCdQSycpKQ0KICAgIGZpbGVuYW1lID0gb3BlbihHdWlkZSkNCiAgICB0cmVlID0gRWxlbWVudFRyZWUucGFyc2UoZmlsZW5hbWUpDQogICAgcG9ueSA9ICJhcHBsZXMiDQogICAgaW1wb3J0IGRhdGV0aW1lIGFzIGR0DQogICAgZnJvbSBkYXRldGltZSBpbXBvcnQgdGltZQ0KICAgIGRhdGUzID0gZGF0ZXRpbWUuZGF0ZXRpbWUubm93KCkgLSBkYXRldGltZS50aW1lZGVsdGEoZGF5cz01KQ0KICAgIGRhdGUgPSBzdHIoZGF0ZTMpDQogICAgbm93ID0gc3RyKGRhdGV0aW1lLmRhdGV0aW1lLm5vdygpKS5yZXBsYWNlKCctJywnJykucmVwbGFjZSgnOicsJycpLnJlcGxhY2UoJyAnLCcnKQ0KICAgIHByb2dyYW1tZXMgPSB0cmVlLmZpbmRhbGwoInByb2dyYW1tZSIpDQogICAgZm9yIHByb2dyYW1tZSBpbiBwcm9ncmFtbWVzOg0KICAgICAgICBpZiBuYW1lIGluIHByb2dyYW1tZS5hdHRyaWIuZ2V0KCdjaGFubmVsJyk6DQogICAgICAgICAgICBzaG93dGltZSA9IHByb2dyYW1tZS5hdHRyaWIuZ2V0KCdzdGFydCcpDQogICAgICAgICAgICBoZWFkLCBzZXAsIHRhaWwgPSBzaG93dGltZS5wYXJ0aXRpb24oJyArJykNCiAgICAgICAgICAgIGRhdGUgPSBzdHIoZGF0ZSkucmVwbGFjZSgnLScsJycpLnJlcGxhY2UoJzonLCcnKS5yZXBsYWNlKCcgJywnJykNCiAgICAgICAgICAgIHllYXIsIG1vbnRoLCBkYXkgPSBzaG93dGltZS5wYXJ0aXRpb24oJzIwMTcnKQ0KICAgICAgICAgICAga2FuYWxpbmltaSA9IHByb2dyYW1tZS5maW5kKCd0aXRsZScpLnRleHQgKyBzaG93dGltZQ0KICAgICAgICAgICAgZGF5ID0gZGF5WzotNl0NCiAgICAgICAgICAgIGlmIGhlYWQgPiBkYXRlOg0KICAgICAgICAgICAgICAgIGlmIGhlYWQgPCBub3c6DQogICAgICAgICAgICAgICAgICAgIGhlYWQyID0gaGVhZA0KICAgICAgICAgICAgICAgICAgICBoZWFkMiA9IGhlYWQyWzo0XSArICcvJyArIGhlYWQyWzQ6XQ0KICAgICAgICAgICAgICAgICAgICBoZWFkID0gaGVhZFs6NF0gKyAnLScgKyBoZWFkWzQ6XQ0KICAgICAgICAgICAgICAgICAgICBoZWFkMiA9IGhlYWQyWzo3XSArICcvJyArIGhlYWQyWzc6XQ0KICAgICAgICAgICAgICAgICAgICBoZWFkID0gaGVhZFs6N10gKyAnLScgKyBoZWFkWzc6XQ0KICAgICAgICAgICAgICAgICAgICBoZWFkMiA9IGhlYWQyWzoxMF0gKyAnIC0gJyArIGhlYWQyWzEwOl0NCiAgICAgICAgICAgICAgICAgICAgaGVhZCA9IGhlYWRbOjEwXSArICc6JyArIGhlYWRbMTA6XQ0KICAgICAgICAgICAgICAgICAgICBoZWFkMiA9IGhlYWQyWzoxNV0gKyAnOicgKyBoZWFkMlsxNTpdDQogICAgICAgICAgICAgICAgICAgIGhlYWQgPSBoZWFkWzoxM10gKyAnLScgKyBoZWFkWzEzOl0NCiAgICAgICAgICAgICAgICAgICAgaGVhZDIgPSBoZWFkMls6LTJdDQogICAgICAgICAgICAgICAgICAgIGhlYWQgPSBoZWFkWzotMl0NCiAgICAgICAgICAgICAgICAgICAgcG9vMSA9ICgiJXM6JXMvc3RyZWFtaW5nL3RpbWVzaGlmdC5waHA/dXNlcm5hbWU9JXMmcGFzc3dvcmQ9JXMmc3RyZWFtPSVzJnN0YXJ0PSIpJShob3N0LHBvcnQsdXNlcm5hbWUscGFzc3dvcmQsZGVzY3JpcHRpb24pDQogICAgICAgICAgICAgICAgICAgIHBvbnkgPSBwb28xICsgc3RyKGhlYWQpICsgIiZkdXJhdGlvbj0yNDAiDQogICAgICAgICAgICAgICAgICAgIGhlYWQyID0gJ1tDT0xPUiBibHVlXSVzIC0gWy9DT0xPUl0nJWhlYWQyIA0KICAgICAgICAgICAgICAgICAgICBrYW5hbGluaW1pID0gc3RyKGhlYWQyKSsgcHJvZ3JhbW1lLmZpbmQoJ3RpdGxlJykudGV4dA0KICAgICAgICAgICAgICAgICAgICBkZXNjICA9IHByb2dyYW1tZS5maW5kKCdkZXNjJykudGV4dA0KICAgICAgICAgICAgICAgICAgICB0b29scy5hZGREaXIoa2FuYWxpbmltaSxwb255LDQsaWNvbixmYW5hcnQsZGVzYykNCiAgICAgICAgICAgICAgICAgICAgeGJtY3BsdWdpbi5zZXRDb250ZW50KGludChzeXMuYXJndlsxXSksICdlcGlzb2RlcycpDQoJDQoJCQkJCQ0KZGVmIERvd25sb2FkZXJDbGFzcyh1cmwsIGRlc3QpOg0KICAgIGRwID0geGJtY2d1aS5EaWFsb2dQcm9ncmVzcygpDQogICAgZHAuY3JlYXRlKCdGZXRjaGluZyBsYXRlc3QgQ2F0Y2ggVXAnLCJGZXRjaGluZyBsYXRlc3QgQ2F0Y2ggVXAuLi4iLCcgJywgJyAnKQ0KICAgIGRwLnVwZGF0ZSgwKQ0KICAgIHN0YXJ0X3RpbWU9dGltZS50aW1lKCkNCiAgICB1cmxsaWIudXJscmV0cmlldmUodXJsLCBkZXN0LCBsYW1iZGEgbmIsIGJzLCBmczogX3BiaG9vayhuYiwgYnMsIGZzLCBkcCwgc3RhcnRfdGltZSkpDQoNCmRlZiBfcGJob29rKG51bWJsb2NrcywgYmxvY2tzaXplLCBmaWxlc2l6ZSwgZHAsIHN0YXJ0X3RpbWUpOg0KICAgICAgICB0cnk6IA0KICAgICAgICAgICAgcGVyY2VudCA9IG1pbihudW1ibG9ja3MgKiBibG9ja3NpemUgKiAxMDAgLyBmaWxlc2l6ZSwgMTAwKSANCiAgICAgICAgICAgIGN1cnJlbnRseV9kb3dubG9hZGVkID0gZmxvYXQobnVtYmxvY2tzKSAqIGJsb2Nrc2l6ZSAvICgxMDI0ICogMTAyNCkgDQogICAgICAgICAgICBrYnBzX3NwZWVkID0gbnVtYmxvY2tzICogYmxvY2tzaXplIC8gKHRpbWUudGltZSgpIC0gc3RhcnRfdGltZSkgDQogICAgICAgICAgICBpZiBrYnBzX3NwZWVkID4gMDogDQogICAgICAgICAgICAgICAgZXRhID0gKGZpbGVzaXplIC0gbnVtYmxvY2tzICogYmxvY2tzaXplKSAvIGticHNfc3BlZWQgDQogICAgICAgICAgICBlbHNlOiANCiAgICAgICAgICAgICAgICBldGEgPSAwIA0KICAgICAgICAgICAga2Jwc19zcGVlZCA9IGticHNfc3BlZWQgLyAxMDI0IA0KICAgICAgICAgICAgbWJwc19zcGVlZCA9IGticHNfc3BlZWQgLyAxMDI0IA0KICAgICAgICAgICAgdG90YWwgPSBmbG9hdChmaWxlc2l6ZSkgLyAoMTAyNCAqIDEwMjQpIA0KICAgICAgICAgICAgbWJzID0gJ1tDT0xPUiB3aGl0ZV0lLjAyZiBNQiBvZiBsZXNzIHRoYW4gNU1CWy9DT0xPUl0nICUgKGN1cnJlbnRseV9kb3dubG9hZGVkKQ0KICAgICAgICAgICAgZSA9ICdbQ09MT1Igd2hpdGVdU3BlZWQ6ICAlLjAyZiBNYi9zICcgJSBtYnBzX3NwZWVkICArICdbL0NPTE9SXScNCiAgICAgICAgICAgIGRwLnVwZGF0ZShwZXJjZW50LCBtYnMsIGUpDQogICAgICAgIGV4Y2VwdDogDQogICAgICAgICAgICBwZXJjZW50ID0gMTAwIA0KICAgICAgICAgICAgZHAudXBkYXRlKHBlcmNlbnQpIA0KICAgICAgICBpZiBkcC5pc2NhbmNlbGVkKCk6DQogICAgICAgICAgICBkaWFsb2cgPSB4Ym1jZ3VpLkRpYWxvZygpDQogICAgICAgICAgICBkaWFsb2cub2soIlRWc3VwZXJ0dWdhIFByZW1pdW0iLCAnVGhlIGRvd25sb2FkIHdhcyBjYW5jZWxsZWQuJykNCgkJCQkNCiAgICAgICAgICAgIHN5cy5leGl0KCkNCiAgICAgICAgICAgIGRwLmNsb3NlKCkNCiMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIw0KDQpkZWYgdHZndWlkZSgpOg0KCWlmIHhibWMuZ2V0Q29uZFZpc2liaWxpdHkoJ1N5c3RlbS5IYXNBZGRvbihwdnIuaXB0dnNpbXBsZSknKSBhbmQgeGJtYy5nZXRDb25kVmlzaWJpbGl0eSgnU3lzdGVtLkhhc0FkZG9uKHNjcmlwdC50dnN1cGVydHVnYWd1aWRlKScpOg0KCQlkaWFsb2cgPSB4Ym1jZ3VpLkRpYWxvZygpLnNlbGVjdCgnU2VsZWN0IGEgVFYgR3VpZGUnLCBbJ1BWUiBUViBHdWlkZScsJ1RWc3VwZXJ0dWdhIEd1aWRlJ10pDQoJCWlmIGRpYWxvZz09MDoNCgkJCXhibWMuZXhlY3V0ZWJ1aWx0aW4oJ0FjdGl2YXRlV2luZG93KFRWR3VpZGUpJykNCgkJZWxpZiBkaWFsb2c9PTE6DQoJCQl4Ym1jLmV4ZWN1dGVidWlsdGluKCdSdW5BZGRvbihzY3JpcHQudHZzdXBlcnR1Z2FndWlkZSknKQ0KCWVsaWYgbm90IHhibWMuZ2V0Q29uZFZpc2liaWxpdHkoJ1N5c3RlbS5IYXNBZGRvbihwdnIuaXB0dnNpbXBsZSknKSBhbmQgeGJtYy5nZXRDb25kVmlzaWJpbGl0eSgnU3lzdGVtLkhhc0FkZG9uKHNjcmlwdC50dnN1cGVydHVnYWd1aWRlKScpOg0KCQl4Ym1jLmV4ZWN1dGVidWlsdGluKCdSdW5BZGRvbihzY3JpcHQudHZzdXBlcnR1Z2FndWlkZSknKQ0KCWVsaWYgeGJtYy5nZXRDb25kVmlzaWJpbGl0eSgnU3lzdGVtLkhhc0FkZG9uKHB2ci5pcHR2c2ltcGxlKScpIGFuZCBub3QgeGJtYy5nZXRDb25kVmlzaWJpbGl0eSgnU3lzdGVtLkhhc0FkZG9uKHNjcmlwdC50dnN1cGVydHVnYWd1aWRlKScpOg0KCQl4Ym1jLmV4ZWN1dGVidWlsdGluKCdBY3RpdmF0ZVdpbmRvdyhUVkd1aWRlKScpDQpkZWYgc3RyZWFtX3ZpZGVvKHVybCk6DQoJdXJsID0gc3RyKHVybCkucmVwbGFjZSgnVVNFUk5BTUUnLHVzZXJuYW1lKS5yZXBsYWNlKCdQQVNTV09SRCcscGFzc3dvcmQpDQoJbGl6ID0geGJtY2d1aS5MaXN0SXRlbSgnJywgaWNvbkltYWdlPSdEZWZhdWx0VmlkZW8ucG5nJywgdGh1bWJuYWlsSW1hZ2U9aWNvbikNCglsaXouc2V0SW5mbyh0eXBlPSdWaWRlbycsIGluZm9MYWJlbHM9eydUaXRsZSc6ICcnLCAnUGxvdCc6ICcnfSkNCglsaXouc2V0UHJvcGVydHkoJ0lzUGxheWFibGUnLCd0cnVlJykNCglsaXouc2V0UGF0aChzdHIodXJsKSkNCgl4Ym1jcGx1Z2luLnNldFJlc29sdmVkVXJsKGludChzeXMuYXJndlsxXSksIFRydWUsIGxpeikNCgkNCmRlZiBBZGRvbigpOg0KCWlmIHhibWMuZ2V0Q29uZFZpc2liaWxpdHkoJ1N5c3RlbS5IYXNBZGRvbihzY3JpcHQubW9kdWxlLnZvZC50dnN1cGVydHVnYS5hZGRvbiknKSBhbmQgeGJtYy5nZXRDb25kVmlzaWJpbGl0eSgnU3lzdGVtLkhhc0FkZG9uKHNjcmlwdC5tb2R1bGUuc3RyZWFtLnR2c3VwZXJ0dWdhLmFkZG9uKScpOg0KCQlkaWFsb2cgPSB4Ym1jZ3VpLkRpYWxvZygpLnNlbGVjdCgnVk9EJywgWydWT0QgVFZzdXBlcnR1Z2EnLCdTdHJlYW0gVFZzdXBlcnR1Z2EnXSkNCgkJaWYgZGlhbG9nPT0wOg0KCQkJeGJtYy5leGVjdXRlYnVpbHRpbignUnVuQWRkb24oc2NyaXB0Lm1vZHVsZS5zdHJlYW0udHZzdXBlcnR1Z2EuYWRkb24pJykNCgkJZWxpZiBkaWFsb2c9PTE6DQoJCQl4Ym1jLmV4ZWN1dGVidWlsdGluKCdSdW5BZGRvbihzY3JpcHQubW9kdWxlLnN0cmVhbS50dnN1cGVydHVnYS5hZGRvbiknKQ0KCWVsaWYgbm90IHhibWMuZ2V0Q29uZFZpc2liaWxpdHkoJ1N5c3RlbS5IYXNBZGRvbihzY3JpcHQubW9kdWxlLnZvZC50dnN1cGVydHVnYS5hZGRvbiknKSBhbmQgeGJtYy5nZXRDb25kVmlzaWJpbGl0eSgnU3lzdGVtLkhhc0FkZG9uKHNjcmlwdC5tb2R1bGUuc3RyZWFtLnR2c3VwZXJ0dWdhLmFkZG9uKScpOg0KCQl4Ym1jLmV4ZWN1dGVidWlsdGluKCdSdW5BZGRvbihzY3JpcHQubW9kdWxlLnN0cmVhbS50dnN1cGVydHVnYS5hZGRvbiknKQ0KCWVsaWYgeGJtYy5nZXRDb25kVmlzaWJpbGl0eSgnU3lzdGVtLkhhc0FkZG9uKHNjcmlwdC5tb2R1bGUudm9kLnR2c3VwZXJ0dWdhLmFkZG9uKScpIGFuZCBub3QgeGJtYy5nZXRDb25kVmlzaWJpbGl0eSgnU3lzdGVtLkhhc0FkZG9uKHNjcmlwdC5tb2R1bGUuc3RyZWFtLnR2c3VwZXJ0dWdhLmFkZG9uKScpOg0KCQl4Ym1jLmV4ZWN1dGVidWlsdGluKCdBY3RpdmF0ZVdpbmRvdyhBZGRvbiknKQ0KZGVmIHN0cmVhbV92aWRlbyh1cmwpOg0KCXVybCA9IHN0cih1cmwpLnJlcGxhY2UoJ1VTRVJOQU1FJyx1c2VybmFtZSkucmVwbGFjZSgnUEFTU1dPUkQnLHBhc3N3b3JkKQ0KCWxpeiA9IHhibWNndWkuTGlzdEl0ZW0oJycsIGljb25JbWFnZT0nRGVmYXVsdFZpZGVvLnBuZycsIHRodW1ibmFpbEltYWdlPWljb24pDQoJbGl6LnNldEluZm8odHlwZT0nVmlkZW8nLCBpbmZvTGFiZWxzPXsnVGl0bGUnOiAnJywgJ1Bsb3QnOiAnJ30pDQoJbGl6LnNldFByb3BlcnR5KCdJc1BsYXlhYmxlJywndHJ1ZScpDQoJbGl6LnNldFBhdGgoc3RyKHVybCkpDQoJeGJtY3BsdWdpbi5zZXRSZXNvbHZlZFVybChpbnQoc3lzLmFyZ3ZbMV0pLCBUcnVlLCBsaXopCQ0KCQ0KCQ0KZGVmIHNlYXJjaGRpYWxvZygpOg0KCXNlYXJjaCA9IGNvbnRyb2wuaW5wdXREaWFsb2coaGVhZGluZz0nU2VhcmNoIFRWc3VwZXJ0dWdhIFByZW1pdW06JykNCglpZiBzZWFyY2g9PSIiOg0KCQlyZXR1cm4NCgllbHNlOg0KCQlyZXR1cm4gc2VhcmNoDQoNCgkJDQoJCQ0KZGVmIHN0YXJ0dXBkKCk6DQoJdHJ5Og0KCQlpZiB4Ym1jYWRkb24uQWRkb24oJ3BsdWdpbi52aWRlby5UVnN1cGVydHVnYScpLmdldFNldHRpbmcoJ3N0YXJ0dXBkJykgPT0gJzAnOnJhaXNlIEV4Y2VwdGlvbigpDQoJCQ0KCQlmcm9tIGRhdGV0aW1lIGltcG9ydCBkYXRlDQoNCgkJb3BlbiAgICAgICA9IHRvb2xzLk9QRU5fVVJMKHBhbmVsX2FwaSkNCgkJDQoJCXVzZXJuYW1lICAgPSB0b29scy5yZWdleF9mcm9tX3RvKG9wZW4sJyJ1c2VybmFtZSI6IicsJyInKQ0KCQlzdGF0dXMgICAgID0gdG9vbHMucmVnZXhfZnJvbV90byhvcGVuLCcic3RhdHVzIjoiJywnIicpDQoJCWV4cGlyeSAgICAgPSB0b29scy5yZWdleF9mcm9tX3RvKG9wZW4sJyJleHBfZGF0ZSI6IicsJyInKQ0KCQlpZiBzdGF0dXMgPT0gJ0V4cGlyZWQnOnhibWNndWkuRGlhbG9nKCkub2soJ1tDT0xPUiBmZmZmMDAwMF1bQl1TdHJlYW1IdWJbL0JdWy9DT0xPUl0nLCdIZWxsbyBUaGVyZSwgJXMuIFlvdXIgQWNjb3VudCBIYXMgRXhwaXJlZCEnLCdIZWFkIFRvIGZhY2Vib29rLmNvbS9ncm91cHMvc3RyZWFtaCBUbyBSZW5ldyEnJXVzZXJuYW1lKQ0KCQlleHBpcnkgICAgID0gZGF0ZXRpbWUuZGF0ZXRpbWUuZnJvbXRpbWVzdGFtcChpbnQoZXhwaXJ5KSkuc3RyZnRpbWUoJyVkLyVtLyVZJykNCgkJZXhwcmVnICAgICA9IHJlLmNvbXBpbGUoJ14oLio/KS8oLio/KS8oLio/KSQnLHJlLkRPVEFMTCkuZmluZGFsbChleHBpcnkpDQoJCQ0KCQlmb3IgZGF5LG1vbnRoLHllYXIgaW4gZXhwcmVnOg0KCQkJZDAgPSBkYXRlKGludCh5ZWFyKSxpbnQobW9udGgpLGludChkYXkpKQ0KCQkJDQoJCXRpbWVzICAgICAgID0gdGltZS50aW1lKCkNCgkJdGltZXMgICAgICA9IGRhdGV0aW1lLmRhdGV0aW1lLmZyb210aW1lc3RhbXAoaW50KHRpbWVzKSkuc3RyZnRpbWUoJyVkLyVtLyVZJykNCgkJdGltZXMgICAgICAgPSByZS5jb21waWxlKCdeKC4qPykvKC4qPykvKC4qPykkJyxyZS5ET1RBTEwpLmZpbmRhbGwodGltZXMpDQoJCQ0KCQlmb3IgZGF5LG1vbnRoLHllYXIgaW4gdGltZXM6DQoJCQlkMSA9IGRhdGUoaW50KHllYXIpLGludChtb250aCksaW50KGRheSkpDQoJCQkNCgkJZGVsdGEgPSBkMCAtIGQxDQoJCWRheXMgID0gZGVsdGEuZGF5cw0KCQkNCgkJaWYgeGJtY2FkZG9uLkFkZG9uKCdwbHVnaW4udmlkZW8uVFZzdXBlcnR1Z2EnKS5nZXRTZXR0aW5nKCdzdGFydHVwZCcpID09ICcyJzoNCgkJCXhibWNndWkuRGlhbG9nKCkubm90aWZpY2F0aW9uKCdbQ09MT1IgZmZmZjAwMDBdW0JdU3RyZWFtSHViWy9CXVsvQ09MT1JdJywnV2VsY29tZSBCYWNrLCBZb3UgSGF2ZSAlcyBEYXlzIExlZnQgT2YgUHJlbWl1bSBDb250ZW50JyVkYXlzKQ0KCQllbGlmIHhibWNhZGRvbi5BZGRvbigncGx1Z2luLnZpZGVvLlRWc3VwZXJ0dWdhJykuZ2V0U2V0dGluZygnc3RhcnR1cGQnKSA9PSAnMSc6DQoJCQl4Ym1jZ3VpLkRpYWxvZygpLm9rKCdbQ09MT1IgZmZmZjAwMDBdW0JdU3RyZWFtSHViWy9CXVsvQ09MT1JdJywnV2VsY29tZSBCYWNrLCAlcyAnJXVzZXJuYW1lLCdZb3UgSGF2ZSAlcyBEYXlzIExlZnQgT2YgUHJlbWl1bSBDb250ZW50JyVkYXlzKQ0KCWV4Y2VwdDoNCgkJcGFzcwkJDQoJCQ0KCQkNCgkJDQoJDQpkZWYgc2VhcmNoKCk6DQoJaWYgbW9kZT09MzoNCgkJcmV0dXJuIEZhbHNlDQoJdGV4dCA9IHNlYXJjaGRpYWxvZygpDQoJaWYgbm90IHRleHQ6DQoJCXhibWMuZXhlY3V0ZWJ1aWx0aW4oIlhCTUMuTm90aWZpY2F0aW9uKFtDT0xPUiByZWRdW0JdU2VhcmNoIGlzIEVtcHR5Wy9CXVsvQ09MT1JdLEFib3J0aW5nIHNlYXJjaCw0MDAwLCIraWNvbisiKSIpDQoJCXJldHVybg0KCXhibWMubG9nKHN0cih0ZXh0KSkNCglvcGVuID0gdG9vbHMuT1BFTl9VUkwocGFuZWxfYXBpKQ0KCWFsbF9jaGFucyA9IHRvb2xzLnJlZ2V4X2dldF9hbGwob3BlbiwneyJudW0iOicsJ2VwZycpDQoJZm9yIGEgaW4gYWxsX2NoYW5zOg0KCQluYW1lID0gdG9vbHMucmVnZXhfZnJvbV90byhhLCduYW1lIjoiJywnIicpLnJlcGxhY2UoJ1wvJywnLycpDQoJCXVybCAgPSB0b29scy5yZWdleF9mcm9tX3RvKGEsJyJzdHJlYW1faWQiOiInLCciJykNCgkJdGh1bWI9IHRvb2xzLnJlZ2V4X2Zyb21fdG8oYSwnc3RyZWFtX2ljb24iOiInLCciJykucmVwbGFjZSgnXC8nLCcvJykNCgkJaWYgdGV4dCBpbiBuYW1lLmxvd2VyKCk6DQoJCQl0b29scy5hZGREaXIobmFtZSxwbGF5X3VybCt1cmwrJy50cycsNCx0aHVtYixmYW5hcnQsJycpDQoJCWVsaWYgdGV4dCBub3QgaW4gbmFtZS5sb3dlcigpIGFuZCB0ZXh0IGluIG5hbWU6DQoJCQl0b29scy5hZGREaXIobmFtZSxwbGF5X3VybCt1cmwrJy50cycsNCx0aHVtYixmYW5hcnQsJycpDQoNCgkNCmRlZiBzZXR0aW5nc21lbnUoKToNCglpZiB4Ym1jYWRkb24uQWRkb24oKS5nZXRTZXR0aW5nKCdtZXRhJyk9PSd0cnVlJzoNCgkJTUVUQSA9ICdbQl1bQ09MT1IgbGltZV1PTlsvQ09MT1JdWy9CXScNCgllbHNlOg0KCQlNRVRBID0gJ1tCXVtDT0xPUiByZWRdT0ZGWy9DT0xPUl1bL0JdJw0KCWlmIHhibWNhZGRvbi5BZGRvbigpLmdldFNldHRpbmcoJ2hpZGV4eHgnKT09J3RydWUnOg0KCQlYWFggPSAnW0JdW0NPTE9SIGxpbWVdT05bL0NPTE9SXVsvQl0nDQoJZWxzZToNCgkJWFhYID0gJ1tCXVtDT0xPUiByZWRdT0ZGWy9DT0xPUl1bL0JdJw0KCXRvb2xzLmFkZERpcignRWRpdCBBZHZhbmNlZCBTZXR0aW5ncycsJ0FEUycsMTAsaWNvbixmYW5hcnQsJycpDQoJdG9vbHMuYWRkRGlyKCdNRVRBIGZvciBWT0QgaXMgJXMnJU1FVEEsJ01FVEEnLDEwLGljb24sZmFuYXJ0LE1FVEEpDQoJdG9vbHMuYWRkRGlyKCdYWFggQ2hhbm5lbHMgYXJlICVzJyVYWFgsJ1hYWCcsMTAsaWNvbixmYW5hcnQsWFhYKQ0KCXRvb2xzLmFkZERpcignTG9nIE91dCcsJ0xPJywxMCxpY29uLGZhbmFydCwnJykNCgkNCg0KZGVmIGFkZG9uc2V0dGluZ3ModXJsLGRlc2NyaXB0aW9uKToNCglpZiAgIHVybCA9PSJDQyI6DQoJCXRvb2xzLmNsZWFyX2NhY2hlKCkNCgllbGlmIHVybCA9PSJBUyI6DQoJCXhibWMuZXhlY3V0ZWJ1aWx0aW4oJ0FkZG9uLk9wZW5TZXR0aW5ncyglcyknJWFkZG9uX2lkKQ0KCWVsaWYgdXJsID09IkFEUyI6DQoJCWRpYWxvZyA9IHhibWNndWkuRGlhbG9nKCkuc2VsZWN0KCdFZGl0IEFkdmFuY2VkIFNldHRpbmdzJywgWydFbmFibGUgRmlyZSBUViBTdGljayBBUycsJ0VuYWJsZSBGaXJlIFRWIEFTJywnRW5hYmxlIDFHQiBSYW0gb3IgTG93ZXIgQVMnLCdFbmFibGUgMkdCIFJhbSBvciBIaWdoZXIgQVMnLCdFbmFibGUgTnZpZGlhIFNoaWVsZCBBUycsJ0Rpc2FibGUgQVMnXSkNCgkJaWYgZGlhbG9nPT0wOg0KCQkJYWR2YW5jZWRzZXR0aW5ncygnc3RpY2snKQ0KCQkJeGJtY2d1aS5EaWFsb2coKS5vaygnVFZzdXBlcnR1Z2EgUHJlbWl1bScsICdTZXQgQWR2YW5jZWQgU2V0dGluZ3MnKQ0KCQllbGlmIGRpYWxvZz09MToNCgkJCWFkdmFuY2Vkc2V0dGluZ3MoJ2ZpcmV0dicpDQoJCQl4Ym1jZ3VpLkRpYWxvZygpLm9rKCdUVnN1cGVydHVnYSBQcmVtaXVtJywgJ1NldCBBZHZhbmNlZCBTZXR0aW5ncycpDQoJCWVsaWYgZGlhbG9nPT0yOg0KCQkJYWR2YW5jZWRzZXR0aW5ncygnbGVzc3RoYW4nKQ0KCQkJeGJtY2d1aS5EaWFsb2coKS5vaygnVFZzdXBlcnR1Z2EgUHJlbWl1bScsICdTZXQgQWR2YW5jZWQgU2V0dGluZ3MnKQ0KCQllbGlmIGRpYWxvZz09MzoNCgkJCWFkdmFuY2Vkc2V0dGluZ3MoJ21vcmV0aGFuJykNCgkJCXhibWNndWkuRGlhbG9nKCkub2soJ1RWc3VwZXJ0dWdhIFByZW1pdW0nLCAnU2V0IEFkdmFuY2VkIFNldHRpbmdzJykNCgkJZWxpZiBkaWFsb2c9PTQ6DQoJCQlhZHZhbmNlZHNldHRpbmdzKCdzaGllbGQnKQ0KCQkJeGJtY2d1aS5EaWFsb2coKS5vaygnVFZzdXBlcnR1Z2EgUHJlbWl1bScsICdTZXQgQWR2YW5jZWQgU2V0dGluZ3MnKQ0KCQllbGlmIGRpYWxvZz09NToNCgkJCWFkdmFuY2Vkc2V0dGluZ3MoJ3JlbW92ZScpDQoJCQl4Ym1jZ3VpLkRpYWxvZygpLm9rKCdUVnN1cGVydHVnYSBQcmVtaXVtJywgJ0FkdmFuY2VkIFNldHRpbmdzIFJlbW92ZWQnKQ0KCWVsaWYgdXJsID09IkFEUzIiOg0KCQlkaWFsb2cgPSB4Ym1jZ3VpLkRpYWxvZygpLnNlbGVjdCgnU2VsZWN0IFlvdXIgRGV2aWNlIE9yIENsb3Nlc3QgVG8nLCBbJ0ZpcmUgVFYgU3RpY2sgJywnRmlyZSBUVicsJzFHQiBSYW0gb3IgTG93ZXInLCcyR0IgUmFtIG9yIEhpZ2hlcicsJ052aWRpYSBTaGllbGQnXSkNCgkJaWYgZGlhbG9nPT0wOg0KCQkJYWR2YW5jZWRzZXR0aW5ncygnc3RpY2snKQ0KCQkJeGJtY2d1aS5EaWFsb2coKS5vaygnVFZzdXBlcnR1Z2EgUHJlbWl1bScsICdTZXQgQWR2YW5jZWQgU2V0dGluZ3MnKQ0KCQllbGlmIGRpYWxvZz09MToNCgkJCWFkdmFuY2Vkc2V0dGluZ3MoJ2ZpcmV0dicpDQoJCQl4Ym1jZ3VpLkRpYWxvZygpLm9rKCdUVnN1cGVydHVnYSBQcmVtaXVtJywgJ1NldCBBZHZhbmNlZCBTZXR0aW5ncycpDQoJCWVsaWYgZGlhbG9nPT0yOg0KCQkJYWR2YW5jZWRzZXR0aW5ncygnbGVzc3RoYW4nKQ0KCQkJeGJtY2d1aS5EaWFsb2coKS5vaygnVFZzdXBlcnR1Z2EgUHJlbWl1bScsICdTZXQgQWR2YW5jZWQgU2V0dGluZ3MnKQ0KCQllbGlmIGRpYWxvZz09MzoNCgkJCWFkdmFuY2Vkc2V0dGluZ3MoJ21vcmV0aGFuJykNCgkJCXhibWNndWkuRGlhbG9nKCkub2soJ1RWc3VwZXJ0dWdhIFByZW1pdW0nLCAnU2V0IEFkdmFuY2VkIFNldHRpbmdzJykNCgkJZWxpZiBkaWFsb2c9PTQ6DQoJCQlhZHZhbmNlZHNldHRpbmdzKCdzaGllbGQnKQ0KCQkJeGJtY2d1aS5EaWFsb2coKS5vaygnVFZzdXBlcnR1Z2EgUHJlbWl1bScsICdTZXQgQWR2YW5jZWQgU2V0dGluZ3MnKQ0KCWVsaWYgdXJsID09InR2IjoNCgkJZGlhbG9nID0geGJtY2d1aS5EaWFsb2coKS5zZWxlY3QoJ1NlbGVjdCBhIFRWIEd1aWRlIHRvIFNldHVwJywgWydUVnN1cGVydHVnYSBHdWlkZScsJ1BWUiBUViBHdWlkZScsJ0JvdGgnXSkNCgkJaWYgZGlhbG9nPT0wOg0KCQkJaXZ1ZWludCgpDQoJCQl4Ym1jZ3VpLkRpYWxvZygpLm9rKCdUVnN1cGVydHVnYSBQcmVtaXVtJywgJ2lWdWUgSW50ZWdyYXRpb24gQ29tcGxldGUnKQ0KCQllbGlmIGRpYWxvZz09MToNCgkJCXB2cnNldHVwKCkNCgkJCXhibWNndWkuRGlhbG9nKCkub2soJ1RWc3VwZXJ0dWdhIFByZW1pdW0nLCAnUFZSIEludGVncmF0aW9uIENvbXBsZXRlJykNCgkJZWxpZiBkaWFsb2c9PTI6DQoJCQlwdnJzZXR1cCgpDQoJCQlpdnVlaW50KCkNCgkJCXhibWNndWkuRGlhbG9nKCkub2soJ1RWc3VwZXJ0dWdhIFByZW1pdW0nLCAnUFZSICYgaVZ1ZSBJbnRlZ3JhdGlvbiBDb21wbGV0ZScpDQoJZWxpZiB1cmwgPT0iU1QiOg0KCQl4Ym1jLmV4ZWN1dGVidWlsdGluKCdSdW5zY3JpcHQoInNwZWNpYWw6Ly9ob21lL2FkZG9ucy9zY3JpcHQuVFZzdXBlcnR1Z2EucHJlbWl1bS9yZXNvdXJjZXMvbW9kdWxlcy9zcGVlZHRlc3QucHkiKScpDQoJZWxpZiB1cmwgPT0iTUVUQSI6DQoJCWlmICdPTicgaW4gZGVzY3JpcHRpb246DQoJCQl4Ym1jYWRkb24uQWRkb24oKS5zZXRTZXR0aW5nKCdtZXRhJywnZmFsc2UnKQ0KCQkJeGJtYy5leGVjdXRlYnVpbHRpbignQ29udGFpbmVyLlJlZnJlc2gnKQ0KCQllbHNlOg0KCQkJeGJtY2FkZG9uLkFkZG9uKCkuc2V0U2V0dGluZygnbWV0YScsJ3RydWUnKQ0KCQkJeGJtYy5leGVjdXRlYnVpbHRpbignQ29udGFpbmVyLlJlZnJlc2gnKQ0KCWVsaWYgdXJsID09IlhYWCI6DQoJCWlmICdPTicgaW4gZGVzY3JpcHRpb246DQoJCQl4Ym1jYWRkb24uQWRkb24oKS5zZXRTZXR0aW5nKCdoaWRleHh4JywnZmFsc2UnKQ0KCQkJeGJtYy5leGVjdXRlYnVpbHRpbignQ29udGFpbmVyLlJlZnJlc2gnKQ0KCQllbHNlOg0KCQkJeGJtY2FkZG9uLkFkZG9uKCkuc2V0U2V0dGluZygnaGlkZXh4eCcsJ3RydWUnKQ0KCQkJeGJtYy5leGVjdXRlYnVpbHRpbignQ29udGFpbmVyLlJlZnJlc2gnKQ0KCWVsaWYgdXJsID09IkxPIjoNCgkJeGJtY2FkZG9uLkFkZG9uKCkuc2V0U2V0dGluZygnVXNlcm5hbWUnLCcnKQ0KCQl4Ym1jYWRkb24uQWRkb24oKS5zZXRTZXR0aW5nKCdQYXNzd29yZCcsJycpDQoJCXhibWMuZXhlY3V0ZWJ1aWx0aW4oJ1hCTUMuQWN0aXZhdGVXaW5kb3coVmlkZW9zLGFkZG9uczovL3NvdXJjZXMvdmlkZW8vKScpDQoJCXhibWMuZXhlY3V0ZWJ1aWx0aW4oJ0NvbnRhaW5lci5SZWZyZXNoJykNCgllbGlmIHVybCA9PSJVUERBVEUiOg0KCQlpZiAnT04nIGluIGRlc2NyaXB0aW9uOg0KCQkJeGJtY2FkZG9uLkFkZG9uKCkuc2V0U2V0dGluZygndXBkYXRlJywnZmFsc2UnKQ0KCQkJeGJtYy5leGVjdXRlYnVpbHRpbignQ29udGFpbmVyLlJlZnJlc2gnKQ0KCQllbHNlOg0KCQkJeGJtY2FkZG9uLkFkZG9uKCkuc2V0U2V0dGluZygndXBkYXRlJywndHJ1ZScpDQoJCQl4Ym1jLmV4ZWN1dGVidWlsdGluKCdDb250YWluZXIuUmVmcmVzaCcpDQoJDQoJCQ0KZGVmIGFkdmFuY2Vkc2V0dGluZ3MoZGV2aWNlKToNCglpZiBkZXZpY2UgPT0gJ3N0aWNrJzoNCgkJZmlsZSA9IG9wZW4ob3MucGF0aC5qb2luKGFkdmFuY2VkX3NldHRpbmdzLCAnc3RpY2sueG1sJykpDQoJZWxpZiBkZXZpY2UgPT0gJ2ZpcmV0dic6DQoJCWZpbGUgPSBvcGVuKG9zLnBhdGguam9pbihhZHZhbmNlZF9zZXR0aW5ncywgJ2ZpcmV0di54bWwnKSkNCgllbGlmIGRldmljZSA9PSAnbGVzc3RoYW4nOg0KCQlmaWxlID0gb3Blbihvcy5wYXRoLmpvaW4oYWR2YW5jZWRfc2V0dGluZ3MsICdsZXNzdGhhbjFHQi54bWwnKSkNCgllbGlmIGRldmljZSA9PSAnbW9yZXRoYW4nOg0KCQlmaWxlID0gb3Blbihvcy5wYXRoLmpvaW4oYWR2YW5jZWRfc2V0dGluZ3MsICdtb3JldGhhbjFHQi54bWwnKSkNCgllbGlmIGRldmljZSA9PSAnc2hpZWxkJzoNCgkJZmlsZSA9IG9wZW4ob3MucGF0aC5qb2luKGFkdmFuY2VkX3NldHRpbmdzLCAnc2hpZWxkLnhtbCcpKQ0KCWVsaWYgZGV2aWNlID09ICdyZW1vdmUnOg0KCQlvcy5yZW1vdmUoYWR2YW5jZWRfc2V0dGluZ3NfdGFyZ2V0KQ0KCQ0KCXRyeToNCgkJcmVhZCA9IGZpbGUucmVhZCgpDQoJCWYgPSBvcGVuKGFkdmFuY2VkX3NldHRpbmdzX3RhcmdldCwgbW9kZT0ndysnKQ0KCQlmLndyaXRlKHJlYWQpDQoJCWYuY2xvc2UoKQ0KCWV4Y2VwdDoNCgkJcGFzcw0KCQkNCgkNCmRlZiBwdnJzZXR1cCgpOg0KCWNvcnJlY3RQVlIoKQ0KCXJldHVybg0KCQkNCgkJDQpkZWYgYXNldHRpbmdzKCk6DQoJY2hvaWNlID0geGJtY2d1aS5EaWFsb2coKS55ZXNubygnVFZzdXBlcnR1Z2EgUHJlbWl1bScsICdQbGVhc2UgU2VsZWN0IFRoZSBSQU0gU2l6ZSBvZiBZb3VyIERldmljZScsIHllc2xhYmVsPSdMZXNzIHRoYW4gMUdCIFJBTScsIG5vbGFiZWw9J01vcmUgdGhhbiAxR0IgUkFNJykNCglpZiBjaG9pY2U6DQoJCWxlc3N0aGFuKCkNCgllbHNlOg0KCQltb3JldGhhbigpDQoJDQoNCmRlZiBtb3JldGhhbigpOg0KCQlmaWxlID0gb3Blbihvcy5wYXRoLmpvaW4oYWR2YW5jZWRfc2V0dGluZ3MsICdtb3JldGhhbi54bWwnKSkNCgkJYSA9IGZpbGUucmVhZCgpDQoJCWYgPSBvcGVuKGFkdmFuY2VkX3NldHRpbmdzX3RhcmdldCwgbW9kZT0ndysnKQ0KCQlmLndyaXRlKGEpDQoJCWYuY2xvc2UoKQ0KDQoJCQ0KZGVmIGxlc3N0aGFuKCk6DQoJCWZpbGUgPSBvcGVuKG9zLnBhdGguam9pbihhZHZhbmNlZF9zZXR0aW5ncywgJ2xlc3N0aGFuLnhtbCcpKQ0KCQlhID0gZmlsZS5yZWFkKCkNCgkJZiA9IG9wZW4oYWR2YW5jZWRfc2V0dGluZ3NfdGFyZ2V0LCBtb2RlPSd3KycpDQoJCWYud3JpdGUoYSkNCgkJZi5jbG9zZSgpDQoJCQ0KCQkNCmRlZiB1c2VycG9wdXAoKToNCglrYiA9eGJtYy5LZXlib2FyZCAoJycsICdoZWFkaW5nJywgVHJ1ZSkNCglrYi5zZXRIZWFkaW5nKCdFbnRlciBVc2VybmFtZScpDQoJa2Iuc2V0SGlkZGVuSW5wdXQoRmFsc2UpDQoJa2IuZG9Nb2RhbCgpDQoJaWYgKGtiLmlzQ29uZmlybWVkKCkpOg0KCQl0ZXh0ID0ga2IuZ2V0VGV4dCgpDQoJCXJldHVybiB0ZXh0DQoJZWxzZToNCgkJcmV0dXJuIEZhbHNlDQoNCgkJDQpkZWYgcGFzc3BvcHVwKCk6DQoJa2IgPXhibWMuS2V5Ym9hcmQgKCcnLCAnaGVhZGluZycsIFRydWUpDQoJa2Iuc2V0SGVhZGluZygnRW50ZXIgUGFzc3dvcmQnKQ0KCWtiLnNldEhpZGRlbklucHV0KEZhbHNlKQ0KCWtiLmRvTW9kYWwoKQ0KCWlmIChrYi5pc0NvbmZpcm1lZCgpKToNCgkJdGV4dCA9IGtiLmdldFRleHQoKQ0KCQlyZXR1cm4gdGV4dA0KCWVsc2U6DQoJCXJldHVybiBGYWxzZQ0KCQkNCgkJDQpkZWYgYWNjb3VudGluZm8oKToNCglvcGVuID0gdG9vbHMuT1BFTl9VUkwocGFuZWxfYXBpKQ0KCXRyeToNCgkJdXNlcm5hbWUgICA9IHRvb2xzLnJlZ2V4X2Zyb21fdG8ob3BlbiwnInVzZXJuYW1lIjoiJywnIicpDQoJCXBhc3N3b3JkICAgPSB0b29scy5yZWdleF9mcm9tX3RvKG9wZW4sJyJwYXNzd29yZCI6IicsJyInKQ0KCQlzdGF0dXMgICAgID0gdG9vbHMucmVnZXhfZnJvbV90byhvcGVuLCcic3RhdHVzIjoiJywnIicpDQoJCWNvbm5lY3RzICAgPSB0b29scy5yZWdleF9mcm9tX3RvKG9wZW4sJyJtYXhfY29ubmVjdGlvbnMiOiInLCciJykNCgkJYWN0aXZlICAgICA9IHRvb2xzLnJlZ2V4X2Zyb21fdG8ob3BlbiwnImFjdGl2ZV9jb25zIjoiJywnIicpDQoJCWV4cGlyeSAgICAgPSB0b29scy5yZWdleF9mcm9tX3RvKG9wZW4sJyJleHBfZGF0ZSI6IicsJyInKQ0KCQlleHBpcnkgICAgID0gZGF0ZXRpbWUuZGF0ZXRpbWUuZnJvbXRpbWVzdGFtcChpbnQoZXhwaXJ5KSkuc3RyZnRpbWUoJyVkLyVtLyVZIC0gJUg6JU0nKQ0KCQlleHByZWcgICAgID0gcmUuY29tcGlsZSgnXiguKj8pLyguKj8pLyguKj8pJCcscmUuRE9UQUxMKS5maW5kYWxsKGV4cGlyeSkNCgkJZm9yIGRheSxtb250aCx5ZWFyIGluIGV4cHJlZzoNCgkJCW1vbnRoICAgICA9IHRvb2xzLk1vbnRoTnVtVG9OYW1lKG1vbnRoKQ0KCQkJeWVhciAgICAgID0gcmUuc3ViKCcgLS4qPyQnLCcnLHllYXIpDQoJCQlleHBpcnkgICAgPSBtb250aCsnICcrZGF5KycgLSAnK3llYXINCgkJCWlwICAgICAgICA9IHRvb2xzLmdldGxvY2FsaXAoKQ0KCQkJZXh0aXAgICAgID0gdG9vbHMuZ2V0ZXh0ZXJuYWxpcCgpCQkNCgkJCXRvb2xzLmFkZERpcignW0NPTE9SIGJsdWVdTm9tZSBkZSBVc3VhcmlvIDpbL0NPTE9SXSAnK3VzZXJuYW1lLCcnLCcnLFV0aWxpemFkb3IsZnVuZG9fdHZfYXJjLCcnKQ0KCQkJdG9vbHMuYWRkRGlyKCdbQ09MT1IgYmx1ZV1TZW5oYSA6Wy9DT0xPUl0gJytwYXNzd29yZCwnJywnJyxVdGlsaXphZG9yLGZ1bmRvX3R2X2FyYywnJykNCgkJCXRvb2xzLmFkZERpcignW0NPTE9SIGJsdWVdRGF0YSBkZSBWYWxpZGFkZTpbL0NPTE9SXSAnK2V4cGlyeSwnJywnJyxVdGlsaXphZG9yLGZ1bmRvX3R2X2FyYywnJykNCgkJCXRvb2xzLmFkZERpcignW0NPTE9SIGJsdWVdU3RhdHVzIGRhIENvbnRhIDpbL0NPTE9SXSAlcyclc3RhdHVzLCcnLCcnLFV0aWxpemFkb3IsZnVuZG9fdHZfYXJjLCcnKQ0KCQkJdG9vbHMuYWRkRGlyKCdbQ09MT1IgYmx1ZV1Db25leG9lcyBBdHVhaXM6Wy9DT0xPUl0gJysgYWN0aXZlLCcnLCcnLFV0aWxpemFkb3IsZnVuZG9fdHZfYXJjLCcnKQ0KCQkJdG9vbHMuYWRkRGlyKCdbQ09MT1IgYmx1ZV1Db25leG9lcyBQZXJtaXRpZGFzOlsvQ09MT1JdICcrY29ubmVjdHMsJycsJycsVXRpbGl6YWRvcixmdW5kb190dl9hcmMsJycpDQoJCQl0b29scy5hZGREaXIoJ1tDT0xPUiBibHVlXUVuZGVyZWNvIElQIExvY2FsOlsvQ09MT1JdICcraXAsJycsJycsVXRpbGl6YWRvcixmdW5kb190dl9hcmMsJycpDQoJCQl0b29scy5hZGREaXIoJ1tDT0xPUiBibHVlXUVuZGVyZWNvIElQIEV4dGVybm86Wy9DT0xPUl0gJytleHRpcCwnJywnJyxVdGlsaXphZG9yLGZ1bmRvX3R2X2FyYywnJykNCgkJCXRvb2xzLmFkZERpcignW0JdS1tDT0xPUiB3aGl0ZV1vZGkgVmVyc2lvbjogJXNbL0NPTE9SXVsvQl0gJyVzdHIoS09ESVYpLCcnLCcnLGljb24sZmFuYXJ0LCcnKQkJCQ0KCWV4Y2VwdDpwYXNzDQoJCQ0KCQ0KZGVmIGNvcnJlY3RQVlIoKToNCg0KCWFkZG9uID0geGJtY2FkZG9uLkFkZG9uKCdzY3JpcHQuVFZzdXBlcnR1Z2EucHJlbWl1bScpDQoJdXNlcm5hbWVfdGV4dCA9IGFkZG9uLmdldFNldHRpbmcoaWQ9J1VzZXJuYW1lJykNCglwYXNzd29yZF90ZXh0ID0gYWRkb24uZ2V0U2V0dGluZyhpZD0nUGFzc3dvcmQnKQ0KCWpzb25TZXRQVlIgPSAneyJqc29ucnBjIjoiMi4wIiwgIm1ldGhvZCI6IlNldHRpbmdzLlNldFNldHRpbmdWYWx1ZSIsICJwYXJhbXMiOnsic2V0dGluZyI6InB2cm1hbmFnZXIuZW5hYmxlZCIsICJ2YWx1ZSI6dHJ1ZX0sImlkIjoxfScNCglJUFRWb24gCSAgID0gJ3sianNvbnJwYyI6IjIuMCIsIm1ldGhvZCI6IkFkZG9ucy5TZXRBZGRvbkVuYWJsZWQiLCJwYXJhbXMiOnsiYWRkb25pZCI6InB2ci5pcHR2c2ltcGxlIiwiZW5hYmxlZCI6dHJ1ZX0sImlkIjoxfScNCgludWxsZGVtbyAgID0gJ3sianNvbnJwYyI6IjIuMCIsIm1ldGhvZCI6IkFkZG9ucy5TZXRBZGRvbkVuYWJsZWQiLCJwYXJhbXMiOnsiYWRkb25pZCI6InB2ci5kZW1vIiwiZW5hYmxlZCI6ZmFsc2V9LCJpZCI6MX0nDQoJbG9naW51cmwgICA9ICJodHRwOi8vdGVhbXR1Z2FpcHR2Lm1lOjI1NDYxL2dldC5waHA/dXNlcm5hbWU9IiArIHVzZXJuYW1lX3RleHQgKyAiJnBhc3N3b3JkPSIgKyBwYXNzd29yZF90ZXh0ICsgIiZ0eXBlPW0zdV9wbHVzJm91dHB1dD10cyINCglFUEd1cmwgICAgID0gImh0dHA6Ly90ZWFtdHVnYWlwdHYubWU6MjU0NjEveG1sdHYucGhwP3VzZXJuYW1lPSIgKyB1c2VybmFtZV90ZXh0ICsgIiZwYXNzd29yZD0iICsgcGFzc3dvcmRfdGV4dCArICImdHlwZT1tM3VfcGx1cyZvdXRwdXQ9dHMiDQoNCgl4Ym1jLmV4ZWN1dGVKU09OUlBDKGpzb25TZXRQVlIpDQoJeGJtYy5leGVjdXRlSlNPTlJQQyhJUFRWb24pDQoJeGJtYy5leGVjdXRlSlNPTlJQQyhudWxsZGVtbykNCgkNCgltb2lzdCA9IHhibWNhZGRvbi5BZGRvbigncHZyLmlwdHZzaW1wbGUnKQ0KCW1vaXN0LnNldFNldHRpbmcoaWQ9J20zdVVybCcsIHZhbHVlPWxvZ2ludXJsKQ0KCW1vaXN0LnNldFNldHRpbmcoaWQ9J2VwZ1VybCcsIHZhbHVlPUVQR3VybCkNCgltb2lzdC5zZXRTZXR0aW5nKGlkPSdtM3VDYWNoZScsIHZhbHVlPSJmYWxzZSIpDQoJbW9pc3Quc2V0U2V0dGluZyhpZD0nZXBnQ2FjaGUnLCB2YWx1ZT0iZmFsc2UiKQ0KCXhibWMuZXhlY3V0ZWJ1aWx0aW4oIkNvbnRhaW5lci5SZWZyZXNoIikNCgkNCmRlZiBpdnVlaW50KCk6DQoJaXZ1ZXNldHVwLmlWdWVJbnQoKQ0KCQ0KZGVmIHR2Z3VpZGVzZXR1cCgpOg0KCQlkaWFsb2cgPSB4Ym1jZ3VpLkRpYWxvZygpLnllc25vKCdUVnN1cGVydHVnYSBQcmVtaXVtJywnV291bGQgWW91IGxpa2UgdXMgdG8gU2V0dXAgdGhlIFRWIEd1aWRlIGZvciBZb3U/JykNCgkJaWYgZGlhbG9nOg0KCQkJZGlhbG9nID0geGJtY2d1aS5EaWFsb2coKS5zZWxlY3QoJ1NlbGVjdCBhIFRWIEd1aWRlIHRvIFNldHVwJywgWydUVnN1cGVydHVnYSBHdWlkZScsJ1BWUiBUViBHdWlkZScsJ0JvdGgnXSkNCgkJCWlmIGRpYWxvZz09MDoNCgkJCQlpdnVlaW50KCkNCgkJCQl4Ym1jZ3VpLkRpYWxvZygpLm9rKCdUVnN1cGVydHVnYSBQcmVtaXVtJywgJ2lWdWUgSW50ZWdyYXRpb24gQ29tcGxldGUnKQ0KCQkJZWxpZiBkaWFsb2c9PTE6DQoJCQkJcHZyc2V0dXAoKQ0KCQkJCXhibWNndWkuRGlhbG9nKCkub2soJ1RWc3VwZXJ0dWdhIFByZW1pdW0nLCAnUFZSIEludGVncmF0aW9uIENvbXBsZXRlJykNCgkJCWVsaWYgZGlhbG9nPT0yOg0KCQkJCXB2cnNldHVwKCkNCgkJCQlpdnVlaW50KCkNCgkJCQl4Ym1jZ3VpLkRpYWxvZygpLm9rKCdUVnN1cGVydHVnYSBQcmVtaXVtJywgJ1BWUiAmIGlWdWUgSW50ZWdyYXRpb24gQ29tcGxldGUnKQ0KDQpkZWYgbnVtMmRheShudW0pOg0KCWlmIG51bSA9PSIwIjoNCgkJZGF5ID0gJ1NlZ3VuZGEtZmVpcmEnDQoJZWxpZiBudW09PSIxIjoNCgkJZGF5ID0gJ1RlcmNhLWZlaXJhJw0KCWVsaWYgbnVtPT0iMiI6DQoJCWRheSA9ICdRdWFydGEtZmVpcmEnDQoJZWxpZiBudW09PSIzIjoNCgkJZGF5ID0gJ1F1aW50YS1mZWlyYScNCgllbGlmIG51bT09IjQiOg0KCQlkYXkgPSAnU2V4dGEtZmVpcmEnDQoJZWxpZiBudW09PSI1IjoNCgkJZGF5ID0gJ1NhYmFkbycNCgllbGlmIG51bT09IjYiOg0KCQlkYXkgPSAnRG9taW5nbycNCglyZXR1cm4gZGF5DQoJDQpkZWYgZXh0cmFzKCk6DQoJI3Rvb2xzLmFkZERpcignQ3JlYXRlIGEgU2hvcnQgTTNVICYgRVBHIFVSTCcsJ3VybCcsMTcsaWNvbixmYW5hcnQsJycpDQoJdG9vbHMuYWRkRGlyKCdJbnRlZ3JhciBDb20gVFYgR3VpZGUnLCd0dicsMTAsaWNvbixmYW5hcnQsJycpDQoJdG9vbHMuYWRkRGlyKCdFeGVjdXRlIHVtIHRlc3RlIGRlIHZlbG9jaWRhZGUnLCdTVCcsMTAsaWNvbixmYW5hcnQsJycpDQoJdG9vbHMuYWRkRGlyKCdMaW1wYXIgY2FjaGUnLCdDQycsMTAsaWNvbixmYW5hcnQsJycpDQoNCgkNCmRlZiBtM3VzZWxlY3RvcigpOg0KCWRpYWxvZyA9IHhibWNndWkuRGlhbG9nKCkuc2VsZWN0KCdTZWxlY3QgYSBNM1UgRm9ybWF0JywgWydNM1UgU3RhbmRhcmQnLCdNM1UgUGx1cyAoSGFzIENoYW5uZWwgQ2F0ZWdvcnlzKSddKQ0KCWlmIGRpYWxvZz09MDoNCgkJdHlwZSA9ICdtM3UnDQoJZWxpZiBkaWFsb2c9PTE6DQoJCXR5cGUgPSAnbTN1X3BsdXMnDQoJDQoJZGlhbG9nID0geGJtY2d1aS5EaWFsb2coKS5zZWxlY3QoJ1NlbGVjdCBhIFN0cmVhbSBGb3JtYXQnLCBbJ01QRUdUUyAoUmVjb21tZW5kZWQpJywnSExTJywnUlRNUCddKQ0KCWlmIGRpYWxvZz09MDoNCgkJb3V0cHV0ID0gJ3RzJw0KCWVsaWYgZGlhbG9nPT0xOg0KCQlvdXRwdXQgPSAnbTN1OCcNCgllbGlmIGRpYWxvZz09MjoNCgkJb3V0cHV0ID0gJ3J0bXAnDQoJCQ0KCW0zdSA9IHVzZXIuaG9zdCArICc6JyArIHVzZXIucG9ydCArICcvZ2V0LnBocD91c2VybmFtZT0nICsgdXNlcm5hbWUgKyAnJnBhc3N3b3JkPScgKyBwYXNzd29yZCArICcmdHlwZT0nICsgdHlwZSArICcmb3V0cHV0PScgKyBvdXRwdXQNCgllcGcgPSB1c2VyLmhvc3QgKyAnOicgKyB1c2VyLnBvcnQgKyAnL3htbHR2LnBocD91c2VybmFtZT0nICsgdXNlcm5hbWUgKyAnJnBhc3N3b3JkPScgKyBwYXNzd29yZA0KCQ0KCW0zdSA9IHVybGxpYi5xdW90ZV9wbHVzKG0zdSkNCgllcGcgPSB1cmxsaWIucXVvdGVfcGx1cyhlcGcpDQoJbTN1LGVwZyA9IHRpbnl1cmxHZXQobTN1LGVwZykNCgkNCgl0ZXh0ID0gJ0hlcmUgSXMgWW91ciBTaG9ydGVuZWQgTTNVICYgRVBHIFVSTFtDUl1bQ1JdTTNVIFVSTDogJXNbQ1JdW0NSXUVQRyBVUkw6ICVzJyUobTN1LGVwZykNCglwb3B1cGQodGV4dCkNCg0KcGFyYW1zPXRvb2xzLmdldF9wYXJhbXMoKQ0KdXJsPU5vbmUNCm5hbWU9Tm9uZQ0KbW9kZT1Ob25lDQppY29uaW1hZ2U9Tm9uZQ0KZGVzY3JpcHRpb249Tm9uZQ0KcXVlcnk9Tm9uZQ0KdHlwZT1Ob25lDQoNCnRyeToNCgl1cmw9dXJsbGliLnVucXVvdGVfcGx1cyhwYXJhbXNbInVybCJdKQ0KZXhjZXB0Og0KCXBhc3MNCnRyeToNCgluYW1lPXVybGxpYi51bnF1b3RlX3BsdXMocGFyYW1zWyJuYW1lIl0pDQpleGNlcHQ6DQoJcGFzcw0KdHJ5Og0KCWljb25pbWFnZT11cmxsaWIudW5xdW90ZV9wbHVzKHBhcmFtc1siaWNvbmltYWdlIl0pDQpleGNlcHQ6DQoJcGFzcw0KdHJ5Og0KCW1vZGU9aW50KHBhcmFtc1sibW9kZSJdKQ0KZXhjZXB0Og0KCXBhc3MNCnRyeToNCglkZXNjcmlwdGlvbj11cmxsaWIudW5xdW90ZV9wbHVzKHBhcmFtc1siZGVzY3JpcHRpb24iXSkNCmV4Y2VwdDoNCglwYXNzDQp0cnk6DQoJcXVlcnk9dXJsbGliLnVucXVvdGVfcGx1cyhwYXJhbXNbInF1ZXJ5Il0pDQpleGNlcHQ6DQoJcGFzcw0KdHJ5Og0KCXR5cGU9dXJsbGliLnVucXVvdGVfcGx1cyhwYXJhbXNbInR5cGUiXSkNCmV4Y2VwdDoNCglwYXNzDQoNCmlmIG1vZGU9PU5vbmUgb3IgdXJsPT1Ob25lIG9yIGxlbih1cmwpPDE6DQoJc3RhcnQoKQ0KDQplbGlmIG1vZGU9PTE6DQoJbGl2ZWNhdGVnb3J5KHVybCkNCgkNCmVsaWYgbW9kZT09MjoNCglMaXZlbGlzdCh1cmwpDQoJDQplbGlmIG1vZGU9PTM6DQoJdm9kKHVybCkNCgkNCmVsaWYgbW9kZT09NDoNCglzdHJlYW1fdmlkZW8odXJsKQ0KCQ0KZWxpZiBtb2RlPT01Og0KCXNlYXJjaCgpDQoJDQplbGlmIG1vZGU9PTY6DQoJYWNjb3VudGluZm8oKQ0KCQ0KZWxpZiBtb2RlPT03Og0KCXR2Z3VpZGUoKQ0KCQ0KZWxpZiBtb2RlPT0yMDoNCglBZGRvbigpCQ0KCQ0KZWxpZiBtb2RlPT04Og0KCXNldHRpbmdzbWVudSgpDQoJDQplbGlmIG1vZGU9PTk6DQoJeGJtYy5leGVjdXRlYnVpbHRpbignQWN0aXZhdGVXaW5kb3coYnVzeWRpYWxvZyknKQ0KCXRvb2xzLlRyYWlsZXIoKS5wbGF5KHVybCkgDQoJeGJtYy5leGVjdXRlYnVpbHRpbignRGlhbG9nLkNsb3NlKGJ1c3lkaWFsb2cpJykNCgkNCmVsaWYgbW9kZT09MTA6DQoJYWRkb25zZXR0aW5ncyh1cmwsZGVzY3JpcHRpb24pDQoJDQplbGlmIG1vZGU9PTExOg0KCXB2cnNldHVwKCkNCgkNCmVsaWYgbW9kZT09MTI6DQoJY2F0Y2h1cCgpDQoNCmVsaWYgbW9kZT09MTM6DQoJdHZhcmNoaXZlKG5hbWUsZGVzY3JpcHRpb24pDQoJDQplbGlmIG1vZGU9PTE0Og0KCWxpc3RjYXRjaHVwMigpDQoJDQplbGlmIG1vZGU9PTE1Og0KCWl2dWVpbnQoKQ0KCQ0KZWxpZiBtb2RlPT0xNjoNCglleHRyYXMoKQ0KCQ0KZWxpZiBtb2RlPT0xNzoNCglzaG9ydGxpbmtzLkdldCgpDQoNCmVsaWYgbW9kZT09MTg6DQoJZm9vdGJhbGxndWlkZXNlYXJjaChkZXNjcmlwdGlvbikNCgkNCmVsaWYgbW9kZT09MTk6DQoJZ2V0KCkNCg0KCQ0KeGJtY3BsdWdpbi5lbmRPZkRpcmVjdG9yeShpbnQoc3lzLmFyZ3ZbMV0pKQ0K"))